import { useEffect, useState } from "react";
import Head from "next/head";

type Counter = {
  id: number;
  processing: "idle" | number;
  processed: Array<number>;
  processingTime: number;
};

const CounterRow = (data: Counter) => (
  <tr>
    <td>Counter {data.id}</td>
    <td>{data.processing}</td>
    <td>{data.processed.join(", ")}</td>
  </tr>
);

const CounterProcessingTimeInput = ({
  counterNumber,
}: {
  counterNumber: number;
}) => (
  <div className="input">
    <p>Counter {counterNumber} Processing Time</p>
    <input
      min="2"
      max="5"
      type="number"
      name={`counter_${counterNumber}`}
      defaultValue={2}
    />
  </div>
);

export default function Home() {
  <Head>
    <title>Create Next App</title>
    <meta name="description" content="Generated by create next app" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" href="/favicon.ico" />
  </Head>;
  const [counters, setCounters] = useState<Array<Counter>>([
    { id: 1, processed: [], processing: "idle", processingTime: 2 },
    { id: 2, processed: [], processing: "idle", processingTime: 2 },
    { id: 3, processed: [], processing: "idle", processingTime: 2 },
    { id: 4, processed: [], processing: "idle", processingTime: 2 },
  ]);

  const [next, setNext] = useState<number>(0);
  const [clientsInQueue, setClientsInQueue] = useState<number>(0);

  const startProcessing = (
    counterIndex: number,
    currentNumberProcessing: number
  ) => {
    const availableCounterProcessingTime =
      counters[counterIndex].processingTime;
    setTimeout(() => {
      setCounters((state) => {
        const newState = [...state];
        const counter = newState[counterIndex];
        counter.processing = "idle";
        counter.processed.push(currentNumberProcessing);
        counter.processed = [...new Set([...counter.processed])];
        return newState;
      });
    }, availableCounterProcessingTime * 1000);
  };

  useEffect(() => {
    if (clientsInQueue > 0) {
      ``;
      setNext((state) => state + 1);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [clientsInQueue]);

  useEffect(() => {
    if (next > 0) {
      const availableCounter = counters.findIndex(
        (c) => c.processing === "idle"
      );

      if (availableCounter > -1) {
        setCounters((state) => {
          const newState = [...state];
          newState[availableCounter].processing = next;
          return newState;
        });
        setClientsInQueue((state) => state - 1);
        startProcessing(availableCounter, next);
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [next]);

  return (
    <main className="main">
      <h1>Bank Counter</h1>

      <table>
        <tbody>
          <tr>
            <th>Counter</th>
            <th>Processing</th>
            <th>Processed</th>
          </tr>
          {counters.map((counter) => (
            <CounterRow key={counter.id} {...counter} />
          ))}
        </tbody>
      </table>

      <h4>Number of people waiting : {clientsInQueue}</h4>
      <button onClick={() => setNext((s) => s + 1)}>Next {next + 1}</button>

      <hr />
      <h2>Set Initial State</h2>
      <form
        className="initial_state_input_container"
        onSubmit={(e) => {
          e.preventDefault();
          const target = e.target as any;
          const countersProcessingTime = [
            +target["counter_1"].value,
            +target["counter_2"].value,
            +target["counter_3"].value,
            +target["counter_4"].value,
          ];
          setCounters((state) => {
            return state.map((c, i) => ({
              ...c,
              processingTime: countersProcessingTime[i],
            }));
          });
          const clientsInQ = +target["start-number"].value;
          setClientsInQueue(clientsInQ);
          setNext(0);
        }}
      >
        <CounterProcessingTimeInput counterNumber={1} />
        <CounterProcessingTimeInput counterNumber={2} />
        <CounterProcessingTimeInput counterNumber={3} />
        <CounterProcessingTimeInput counterNumber={4} />
        <div className="input">
          <p>Start Number</p>
          <input type="number" name="start-number" />
        </div>
        <button type="submit">Change Init</button>
      </form>
    </main>
  );
}
